{"version":3,"sources":["themes/openrpcTheme.ts","containers/JSONRPCRequest.tsx","containers/Inspector.tsx","containers/App.tsx","index.tsx"],"names":["lightTheme","createMuiTheme","props","MuiAppBar","position","MuiCard","elevation","overrides","root","background","palette","default","darkTheme","type","grey","paper","MuiTable","MuiTypography","color","JSONRPCRequest","_useState","useState","collapseStringsAfterLength","displayDataTypes","displayObjectSize","indentWidth","name","reactJsonOptions","Object","slicedToArray","handleChange","changed","onChange","updated_src","react_default","a","createElement","Fragment","main_default","assign","theme","reactJsonTheme","src","json","onEdit","onAdd","onDelete","Inspector","_useCounter","defaultValue","_useState3","_useState4","counter","setCounter","useCounter","_useCounter2","id","incrementId","_useState5","request","jsonrpc","method","params","_useState6","setJson","_useState7","_useState8","results","setResults","_useState9","url","_useState10","setUrl","_useClient","_useState2","client","setClient","useEffect","transport","includes","HTTPTransport","WebSocketTransport","console","error","concat","t","c","Client","RequestManager","e","useClient","handlePlayButton","_ref","asyncToGenerator","regenerator_default","mark","_callee","result","wrap","_context","prev","next","sent","t0","stop","apply","this","arguments","style","height","AppBar","Toolbar","alt","marginRight","Typography","variant","IconButton","onClick","PlayCircleFilled_default","InputBase","value","placeholder","event","target","fullWidth","borderRadius","padding","hideToggleTheme","onToggleDarkMode","darkMode","Brightness3_default","WbSunny_default","display","marginBottom","index_esm","split","minSize","maxSize","defaultSize","flexGrow","width","containers_JSONRPCRequest","objectSpread","toString","overflowY","paddingBottom","Button","top","right","zIndex","undefined","App","useDarkMode","MuiThemeProvider","CssBaseline","containers_Inspector","toggle","ReactDOM","render","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.ec9b7c6e.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const lightTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"#fff !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  palette: {\n    type: \"dark\",\n    background: {\n      default: grey[900],\n      paper: grey[800],\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: grey[400],\n      },\n    },\n  },\n});\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","import React, { useState } from \"react\";\nimport ReactJson, { ReactJsonViewProps } from \"react-json-view\";\n\ninterface IProps {\n  json?: any;\n  reactJsonTheme: ReactJsonViewProps[\"theme\"];\n  onChange?: (newValue: any) => void;\n}\n\nconst JSONRPCRequest: React.FC<IProps> = (props) => {\n  const [reactJsonOptions] = useState({\n    collapseStringsAfterLength: 25,\n    displayDataTypes: false,\n    displayObjectSize: false,\n    indentWidth: 2,\n    name: false,\n  });\n\n  const handleChange = (changed: any) => {\n    if (props.onChange) {\n      props.onChange(changed.updated_src);\n    }\n  };\n\n  return (\n    <>\n      <ReactJson\n        theme={props.reactJsonTheme}\n        src={props.json}\n        {...reactJsonOptions as any}\n        onEdit={handleChange}\n        onAdd={handleChange}\n        onDelete={handleChange}\n      />\n    </>\n  );\n};\n\nexport default JSONRPCRequest;\n","import React, { useState, useEffect, ChangeEvent } from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport JSONRPCRequest from \"./JSONRPCRequest\";\nimport PlayCircle from \"@material-ui/icons/PlayCircleFilled\";\nimport { IconButton, AppBar, Toolbar, Typography, Button, InputBase } from \"@material-ui/core\";\nimport { Client, RequestManager, HTTPTransport, WebSocketTransport } from \"@open-rpc/client-js\";\nimport ReactJson, { ReactJsonViewProps } from \"react-json-view\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\n\ninterface IProps {\n  url?: string;\n  request?: any;\n  darkMode?: boolean;\n  hideToggleTheme?: boolean;\n  onToggleDarkMode?: () => void;\n  reactJsonTheme?: ReactJsonViewProps[\"theme\"];\n}\n\nconst useClient = (url: string): [Client] => {\n  const [client, setClient] = useState();\n  useEffect(() => {\n    let transport;\n    if (url.includes(\"http://\") || url.includes(\"https://\")) {\n      transport = HTTPTransport;\n    }\n    if (url.includes(\"ws://\")) {\n      transport = WebSocketTransport;\n    }\n    if (!transport) {\n      return console.error(`No Transport Found for url: ${url}`);\n    }\n    try {\n      const t = new transport(url);\n      const c = new Client(new RequestManager([t]));\n      setClient(c);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [url]);\n  return [client];\n}\n\nfunction useCounter(defaultValue: number): [number, () => void] {\n  const [counter, setCounter] = useState(defaultValue);\n\n  const incrementCounter = () => {\n    setCounter(counter + 1);\n  };\n\n  return [counter, incrementCounter];\n}\n\nconst Inspector: React.FC<IProps> = (props) => {\n\n  const [id, incrementId] = useCounter(0);\n  const [json, setJson] = useState(props.request || {\n    jsonrpc: \"2.0\",\n    method: \"\",\n    params: [],\n    id,\n  });\n  const [results, setResults] = useState();\n  const [url, setUrl] = useState(props.url || \"\");\n  const [client] = useClient(url);\n\n  useEffect(() => {\n    if (props.url) {\n      setUrl(props.url);\n    }\n  }, [props.url]);\n\n  const handlePlayButton = async () => {\n    if (client) {\n      incrementId();\n      try {\n        const result = await client.request(json.method, json.params);\n        setResults({ jsonrpc: \"2.0\", result });\n      } catch (e) {\n        setResults(e);\n      }\n    }\n  };\n\n  const handleClearButton = () => {\n    setResults(undefined);\n  };\n\n  const handleToggleDarkMode =  () => {\n    if (props.onToggleDarkMode) {\n      props.onToggleDarkMode();\n    }\n  };\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      <AppBar position=\"static\" elevation={0} color=\"default\">\n        <Toolbar>\n          <img\n            height=\"30\"\n            alt=\"openrpc-logo\"\n            style={{ marginRight: \"10px\" }}\n            src=\"https://github.com/open-rpc/design/raw/master/icons/open-rpc-logo-noText/open-rpc-logo-noText%20(PNG)/128x128.png\" //tslint:disable-line\n          />\n          <Typography variant=\"h6\" color=\"textSecondary\">Inspector</Typography>\n          <IconButton onClick={handlePlayButton}>\n            <PlayCircle />\n          </IconButton>\n          <InputBase\n            value={url}\n            placeholder=\"Enter a JSON-RPC server URL\"\n            onChange={\n              (event: ChangeEvent<HTMLInputElement>) => setUrl(event.target.value)\n            }\n            fullWidth\n            style={{ background: \"rgba(0,0,0,0.1)\", borderRadius: \"4px\", padding: \"0px 10px\", marginRight: \"5px\" }}\n          />\n          {\n            props.hideToggleTheme\n              ? null\n              : <IconButton onClick={handleToggleDarkMode}>\n                {props.darkMode ? <Brightness3Icon /> : <WbSunnyIcon />}\n              </IconButton>\n          }\n        </Toolbar>\n      </AppBar>\n      <div style={{ display: \"flex\", marginBottom: \"-80px\" }}>\n        <SplitPane split=\"vertical\" minSize={100} maxSize={-100} defaultSize={\"35%\"} style={{ flexGrow: 1 }}>\n          <div style={{ width: \"99%\", padding: \"10px\" }}>\n            <JSONRPCRequest\n              json={{ ...json, id: id.toString() }}\n              onChange={setJson}\n              reactJsonTheme={props.reactJsonTheme || \"summerfruit:inverted\"}\n            />\n          </div>\n          <div style={{ height: \"100%\", padding: \"10px\", overflowY: \"auto\", paddingBottom: \"80px\" }}>\n            {results &&\n              <Button\n                style={{ position: \"absolute\", top: \"15px\", right: \"15px\", zIndex: 1 }}\n                onClick={handleClearButton}>\n                Clear\n                </Button>\n            }\n            {results &&\n              <ReactJson\n                src={results ? { ...results, id: (id - 1).toString() } : null}\n                name={false}\n                displayDataTypes={false}\n                displayObjectSize={false}\n                theme={props.reactJsonTheme || \"summerfruit:inverted\"}\n              />}\n          </div>\n        </SplitPane >\n      </div>\n    </div>\n  );\n};\n\nexport default Inspector;\n","import React from \"react\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { MuiThemeProvider } from \"@material-ui/core\";\nimport { lightTheme, darkTheme } from \"../themes/openrpcTheme\";\nimport useDarkMode from \"use-dark-mode\";\nimport Inspector from \"./Inspector\";\n\nconst App: React.FC = () => {\n  const darkMode = useDarkMode();\n  const theme = darkMode.value ? darkTheme : lightTheme;\n  const reactJsonTheme = darkMode.value ? \"summerfruit\" : \"summerfruit:inverted\";\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Inspector onToggleDarkMode={darkMode.toggle} darkMode={darkMode.value} reactJsonTheme={reactJsonTheme}/>\n    </MuiThemeProvider>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./containers/App\";\nimport \"./App.css\";\nimport \"./splitpane.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}