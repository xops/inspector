{"version":3,"sources":["themes/openrpcTheme.ts","containers/JSONRPCRequest.tsx","containers/Inspector.tsx","hooks/useQueryParams.ts","containers/App.tsx","index.tsx"],"names":["lightTheme","createMuiTheme","props","MuiAppBar","position","MuiCard","elevation","overrides","root","background","palette","default","darkTheme","type","grey","paper","MuiTable","MuiTypography","color","monaco","init","then","m","modelUri","Uri","parse","concat","Math","random","languages","json","jsonDefaults","setDiagnosticsOptions","enableSchemaRequest","schemas","fileMatch","schema","properties","method","params","uri","toString","validate","window","addEventListener","editor","layout","catch","error","console","JSONRPCRequest","darkMode","useDarkMode","react_default","a","createElement","Fragment","lib","theme","value","language","onChange","ev","Inspector","_useCounter","defaultValue","_useState5","useState","_useState6","Object","slicedToArray","counter","setCounter","useCounter","_useCounter2","id","incrementId","_useState7","request","jsonrpc","_useState8","setJson","editorRef","useRef","_useState9","_useState10","results","setResults","_useState11","url","_useState12","setUrl","_useClient","_useState","_useState2","client","setClient","_useState3","_useState4","setError","useEffect","transport","includes","HTTPTransport","WebSocketTransport","t","c","Client","RequestManager","onError","e","log","useClient","_useClient2","handlePlayButton","_ref","asyncToGenerator","regenerator_default","mark","_callee","result","wrap","_context","prev","next","clear","sent","t0","stop","apply","this","arguments","undefined","style","height","AppBar","Toolbar","alt","marginRight","src","Typography","variant","IconButton","onClick","PlayCircleFilled_default","InputBase","placeholder","event","target","fullWidth","borderRadius","padding","hideToggleTheme","onToggleDarkMode","Brightness3_default","WbSunny_default","display","marginBottom","index_esm","split","minSize","maxSize","defaultSize","flexGrow","current","width","containers_JSONRPCRequest","val","JSON","stringify","overflowY","paddingBottom","Button","top","right","zIndex","lib_default","options","minimap","enabled","wordWrap","lineNumbers","wrappingIndent","readOnly","showFoldingControls","editorDidMount","_","useQueryParams","depth","qs","location","search","ignoreQueryPrefix","decoder","str","decodeURIComponent","App","_useQueryParams","query","MuiThemeProvider","CssBaseline","containers_Inspector","toggle","ReactDOM","render","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.ddd7408f.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const lightTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"#fff !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  palette: {\n    type: \"dark\",\n    background: {\n      default: grey[900],\n      paper: grey[800],\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: grey[400],\n      },\n    },\n  },\n});\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","import React from \"react\";\nimport useDarkMode from \"use-dark-mode\";\nimport { monaco, ControlledEditor, Monaco } from \"@monaco-editor/react\";\n\ninterface IProps {\n  onChange?: (newValue: any) => void;\n  value: any;\n}\nmonaco\n  .init()\n  .then((m: Monaco) => {\n    const modelUri = m.Uri.parse(`inmemory:/${Math.random()}/model/userSpec.json`);\n    m.languages.json.jsonDefaults.setDiagnosticsOptions({\n      enableSchemaRequest: true,\n      schemas: [\n        {\n          fileMatch: [\"*\"],\n          schema: {\n            type: \"object\",\n            properties: {\n              method: {\n                type: \"string\",\n              },\n              params: {\n                type: \"array\",\n              },\n            },\n          },\n          uri: modelUri.toString(),\n        },\n      ],\n      validate: true,\n    });\n    window.addEventListener(\"resize\", m.editor.layout());\n  })\n  .catch((error: Error) => console.error(\"An error occurred during initialization of Monaco: \", error));\n\nconst JSONRPCRequest: React.FC<IProps> = (props) => {\n  const darkMode = useDarkMode();\n\n  const handleChange = (ev: any, value: any) => {\n    if (props.onChange) {\n      props.onChange(value);\n    }\n  };\n\n  return (\n    <>\n      <ControlledEditor\n        theme={darkMode.value ? \"dark\" : \"light\"}\n        value={props.value}\n        language=\"json\"\n        onChange={handleChange}\n      />\n    </>\n  );\n};\n\nexport default JSONRPCRequest;\n","import React, { useState, useEffect, ChangeEvent, Dispatch, useRef } from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport JSONRPCRequest from \"./JSONRPCRequest\";\nimport PlayCircle from \"@material-ui/icons/PlayCircleFilled\";\nimport { IconButton, AppBar, Toolbar, Typography, Button, InputBase } from \"@material-ui/core\";\nimport { Client, RequestManager, HTTPTransport, WebSocketTransport } from \"@open-rpc/client-js\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport { JSONRPCError } from \"@open-rpc/client-js/build/Error\";\nimport useDarkMode from \"use-dark-mode\";\nimport Editor from \"@monaco-editor/react\";\n\ninterface IProps {\n  url?: string;\n  request?: any;\n  darkMode?: boolean;\n  hideToggleTheme?: boolean;\n  onToggleDarkMode?: () => void;\n}\n\nconst useClient = (url: string): [Client, JSONRPCError | undefined, Dispatch<JSONRPCError | undefined>] => {\n  const [client, setClient] = useState();\n  const [error, setError] = useState();\n  useEffect(() => {\n    let transport;\n    if (url.includes(\"http://\") || url.includes(\"https://\")) {\n      transport = HTTPTransport;\n    }\n    if (url.includes(\"ws://\")) {\n      transport = WebSocketTransport;\n    }\n    try {\n      const clientTransport = transport || HTTPTransport;\n      const t = new clientTransport(url);\n      const c = new Client(new RequestManager([t]));\n      setClient(c);\n      c.onError((e) => {\n        console.log(\"onError\", e); //tslint:disable-line\n        setError(e);\n      });\n    } catch (e) {\n      setError(e);\n    }\n  }, [url]);\n  return [client, error, setError];\n};\n\nfunction useCounter(defaultValue: number): [number, () => void] {\n  const [counter, setCounter] = useState(defaultValue);\n\n  const incrementCounter = () => {\n    setCounter(counter + 1);\n  };\n\n  return [counter, incrementCounter];\n}\n\nconst Inspector: React.FC<IProps> = (props) => {\n  const darkMode = useDarkMode();\n  const [id, incrementId] = useCounter(0);\n  const [json, setJson] = useState(props.request || {\n    jsonrpc: \"2.0\",\n    method: \"\",\n    params: [],\n    id,\n  });\n  const editorRef = useRef();\n  const [results, setResults] = useState();\n  const [url, setUrl] = useState(props.url || \"\");\n  const [client, error, setError] = useClient(url);\n\n  useEffect(() => {\n    if (props.url) {\n      setUrl(props.url);\n    }\n  }, [props.url]);\n\n  const handlePlayButton = async () => {\n    clear();\n    if (client) {\n      incrementId();\n      try {\n        const result = await client.request(json.method, json.params);\n        setResults({ jsonrpc: \"2.0\", result });\n      } catch (e) {\n        setError(e);\n      }\n    }\n  };\n  function handleResponseEditorDidMount(_: any, editor: any) {\n    editorRef.current = editor;\n  }\n\n  const clear = () => {\n    setResults(undefined);\n    setError(undefined);\n  };\n\n  const handleClearButton = () => {\n    clear();\n  };\n\n  const handleToggleDarkMode = () => {\n    if (props.onToggleDarkMode) {\n      props.onToggleDarkMode();\n    }\n  };\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      <AppBar position=\"static\" elevation={0} color=\"default\">\n        <Toolbar>\n          <img\n            height=\"30\"\n            alt=\"openrpc-logo\"\n            style={{ marginRight: \"10px\" }}\n            src=\"https://github.com/open-rpc/design/raw/master/icons/open-rpc-logo-noText/open-rpc-logo-noText%20(PNG)/128x128.png\" //tslint:disable-line\n          />\n          <Typography variant=\"h6\" color=\"textSecondary\">Inspector</Typography>\n          <IconButton onClick={handlePlayButton}>\n            <PlayCircle />\n          </IconButton>\n          <InputBase\n            value={url}\n            placeholder=\"Enter a JSON-RPC server URL\"\n            onChange={\n              (event: ChangeEvent<HTMLInputElement>) => setUrl(event.target.value)\n            }\n            fullWidth\n            style={{ background: \"rgba(0,0,0,0.1)\", borderRadius: \"4px\", padding: \"0px 10px\", marginRight: \"5px\" }}\n          />\n          {\n            props.hideToggleTheme\n              ? null\n              : <IconButton onClick={handleToggleDarkMode}>\n                {props.darkMode ? <Brightness3Icon /> : <WbSunnyIcon />}\n              </IconButton>\n          }\n        </Toolbar>\n      </AppBar>\n      <div style={{ display: \"flex\", marginBottom: \"-80px\" }}>\n        <SplitPane\n          split=\"vertical\"\n          minSize={100}\n          maxSize={-100}\n          defaultSize={\"50%\"}\n          style={{ flexGrow: 1 }}\n          onChange={() => {\n            if (editorRef && editorRef.current) {\n              (editorRef.current as any).layout();\n            }\n          }}>\n          <div style={{ width: \"99%\", padding: \"10px\" }}>\n            <JSONRPCRequest onChange={(val) => setJson(JSON.parse(val))} value={JSON.stringify(json, null, 4)} />\n          </div>\n          <div style={{ height: \"100%\", padding: \"10px\", overflowY: \"auto\", paddingBottom: \"80px\" }}>\n            {(results || error) &&\n              <Button\n                style={{ position: \"absolute\", top: \"15px\", right: \"15px\", zIndex: 1 }}\n                onClick={handleClearButton}>\n                Clear\n                </Button>\n            }\n            <Editor\n              options={{\n                minimap: {\n                  enabled: false,\n                },\n                wordWrap: \"on\",\n                lineNumbers: \"off\",\n                wrappingIndent: \"deepIndent\",\n                readOnly: true,\n                showFoldingControls: \"always\",\n              }}\n              editorDidMount={handleResponseEditorDidMount}\n              theme={darkMode.value ? \"dark\" : \"light\"}\n              language=\"json\"\n              value={JSON.stringify(error || results, null, 4) || \"\"}\n            />\n          </div>\n        </SplitPane >\n      </div>\n    </div>\n  );\n};\n\nexport default Inspector;\n","import { useState } from \"react\";\nimport * as qs from \"qs\";\n\nconst useQueryParams = (depth?: number) => {\n  const parse = () => {\n    return qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n      depth: depth || 100,\n      decoder(str) {\n        if (str === \"false\") {\n          return false;\n        }\n        if (str === \"true\") {\n          return true;\n        }\n        return decodeURIComponent(str);\n      },\n    });\n  };\n  const [query] = useState(parse());\n  return [query];\n};\n\nexport default useQueryParams;\n","import React from \"react\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { MuiThemeProvider } from \"@material-ui/core\";\nimport { lightTheme, darkTheme } from \"../themes/openrpcTheme\";\nimport useDarkMode from \"use-dark-mode\";\nimport Inspector from \"./Inspector\";\nimport useQueryParams from \"../hooks/useQueryParams\";\n\nconst App: React.FC = () => {\n  const darkMode = useDarkMode();\n  const [query] = useQueryParams();\n  const theme = darkMode.value ? darkTheme : lightTheme;\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Inspector\n        onToggleDarkMode={darkMode.toggle}\n        darkMode={darkMode.value}\n        url={query.url}\n        request={query.request}\n      />\n    </MuiThemeProvider>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./containers/App\";\nimport \"./App.css\";\nimport \"./splitpane.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}